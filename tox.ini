# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[bumpversion]
current_version = "0.1.0"
commit = True
tag = True
parse = (?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(\.dev(?P<dev>\d+))?
serialize = 
	{major}.{minor}.{patch}.dev{dev}
	{major}.{minor}.{patch}

[bumpversion:part:release]
optional_value = release
values = 
  .dev
  release

[tox]
isolated_build = true
envlist = py

[pycodestyle]
max-line-length = 120

[isort]
force_grid_wrap     = 0
use_parentheses     = False
multi_line_output   = 0
line_length         = 120

[pytest]
junit_family=legacy
addopts = -v
		  --junit-xml report.xml
markers =
	unit: mark a test as a unit test.
	component: mark a test as a component test.
	integration: mark a test as a integration test.
	smoke: mark a test as a smoke test.

[testenv]
skipsdist = true
whitelist_externals = poetry
skip_install = true
commands =
        poetry install -v
        poetry run pycodestyle --ignore E501 --show-pep8 --statistics metron_sites
        poetry run flake8 metron_sites
        poetry run isort --check-only --diff --up metron_sites
        poetry run pylint --rcfile pylint.rc metron_sites
        poetry run pytest -m unit
        # poetry run pytest -m integration
setenv =
        LANG=en_US.UTF-8
        LANGUAGE=en_US:en
        LC_ALL=en_US.UTF-8
        DB_USER=postgres
        DB_PWD=postgres
        DB_NAME=postgres
        DB_HOST=0.0.0.0


[testenv:integration]
whitelist_externals = poetry
commands            = poetry run pytest -m integration


[testenv:type]
deps        = mypy
commands    = poetry run mypy --ignore-missing-imports --no-warn-no-return --install-types --non-interactive metron_sites

;[testenv:safety]
;whitelist_externals = poetry
;                      safety
;                      git
;                      rm
;commands =
;           poetry install -v
;           poetry run pip install safety
;           rm -rf safety-db
;           git clone https://github.com/safety-db
;           poetry run safety check --db=safety-db/data

[flake8]
show-source     = True
exclude         =.git/,config/,*/migrations/,__pycache__,venv,.env
ignore          =F401,F403,F405
max-line-length =150


[run]
branch = True

[paths]
source =
    potato/

[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
	
	show_missing = True

ignore_errors = True

[html]
directory = coverage_html_report
